---
AWSTemplateFormatVersion: 2010-09-09
Description: "Continuous Delivery Pipeline for Zyme Caucus Integration"

Parameters:
  Environment:
    Type: String
    Default: test
    AllowedValues:
      - test
      - prod
  ECRRepositoryArn:
    Type: String
  GitHubOwner:
    Type: String
    Default: bizm
  GitHubRepository:
    Type: String
    Default: zyme-caucus-integration
  GitHubBranch:
    Type: String
  CertificateArn:
    Description: "The reference to an AWS-managed certificate to be passed to ECS stack"
    Type: String
  CaucusJwtKeySecretArn:
    Description: ARN of secret with Caucus JWT signing key
    Type: String
  ConnectionArn:
    Description: ARN of CodeStarSourceConnection for GitHub (Developer Tools > Connections)
    Type: String

Mappings:
  EnvironmentNames:
    test:
      Name: Test
      NlbHostSSMParameter: "/ZymeApi/test/nlbHost"
      VpcLinkIdSSMParameter: "/ZymeApi/test/vpcLink"
    prod:
      Name: Production
      NlbHostSSMParameter: "/ZymeApi/prod/nlbHost"
      VpcLinkIdSSMParameter: "/ZymeApi/prod/vpcLink"

Resources:

  DockerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub zyme-caucus-${Environment}-codebuild
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws/buildspec.yml
      SourceVersion: master
      ServiceRole: !GetAtt
        - CodeBuildServiceRole
        - Arn
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # Ubuntu image
        Image: aws/codebuild/standard:2.0-1.13.0
        # privileged mode is required for building docker image
        PrivilegedMode: true
        # environment variables are supplied from pipeline
      Tags:
        - Key: Application ID
          Value: Zyme Caucus integration
        - Key: Environment
          Value: !FindInMap [EnvironmentNames, !Ref "Environment", Name]

  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub zyme-caucus-${Environment}-codebuild-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub zyme-caucus-${Environment}-codebuild-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ecr:*'
                Resource: '*'
      Tags:
        - Key: Application ID
          Value: Zyme Caucus integration
        - Key: Environment
          Value: !FindInMap [EnvironmentNames, !Ref "Environment", Name]

  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      # Make bucket name unique by adding stack id
      BucketName: !Join
        - "-"
        - - !Sub zyme-caucus-${Environment}-pipeline-artifacts
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
          - NoncurrentVersionExpirationInDays: 1
            Status: Enabled
      Tags:
        - Key: Application ID
          Value: Zyme Caucus integration
        - Key: Environment
          Value: !FindInMap [EnvironmentNames, !Ref "Environment", Name]
    DeletionPolicy: Delete

  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub
              - ${BucketArn}/*
              - { BucketArn: !GetAtt CodePipelineArtifactStoreBucket.Arn }
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Sub
              - ${BucketArn}/*
              - { BucketArn: !GetAtt CodePipelineArtifactStoreBucket.Arn }
            Condition:
              Bool:
                'aws:SecureTransport': false

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - DockerBuildProject
      - CodePipelineArtifactStoreBucket
      - CodePipelineArtifactStoreBucketPolicy
    Properties:
      Name: !Sub zyme-caucus-${Environment}-pipeline
      RoleArn: !GetAtt
        - CodePipelineServiceRole
        - Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Join [ "/", [ !Ref GitHubOwner, !Ref GitHubRepository ]]
                BranchName: !Ref GitHubBranch
                DetectChanges: true
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: DockerBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DockerBuildProject
                PrimarySource: SourceOutput
                EnvironmentVariables: !Sub |
                  [
                    {"name": "ECR_REPOSITORY_ARN", "value": "${ECRRepositoryArn}", "type": "PLAINTEXT" },
                    {"name": "ENVIRONMENT", "value": "${Environment}", "type": "PLAINTEXT" }
                  ]
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              InputArtifacts:
                - Name: SourceOutput
                - Name: BuildOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt
                  - CloudFormationServiceRole
                  - Arn
                StackName: !Sub zyme-caucus-${Environment}-ecs
                TemplatePath: "BuildOutput::aws/zyme-caucus-vpc-api-ecs.yml"
                # PipelineStackName parameter is reserved for future use so that ECS stack can refer outputs of Pipeline stack
                ParameterOverrides: !Sub
                  - |
                    {
                      "Environment": "${Environment}",
                      "PipelineStackName" : "${AWS::StackName}",
                      "DockerImageURI": { "Fn::GetParam" : ["BuildOutput", "meta.json", "DockerImageURI"] },
                      "CertificateArn": "${CertificateArn}",
                      "NlbHost": "${NlbHost}",
                      "VpcLinkId": "${VpcLinkId}",
                      "CaucusJwtKeySecretArn": "${CaucusJwtKeySecretArn}"
                    }
                  - NlbHost: !FindInMap [EnvironmentNames, !Ref "Environment", NlbHostSSMParameter]
                    VpcLinkId: !FindInMap [EnvironmentNames, !Ref "Environment", VpcLinkIdSSMParameter]
              RunOrder: 1
      Tags:
        - Key: Application ID
          Value: Zyme Caucus integration
        - Key: Environment
          Value: !FindInMap [EnvironmentNames, !Ref "Environment", Name]

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub zyme-caucus-${Environment}-pipeline-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub zyme-caucus-${Environment}-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:PassRole'
                  - 'iam:DetachRolePolicy'
                  - 'iam:DeleteRole'
                  - 'iam:CreateRole'
                  - 'iam:AttachRolePolicy'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'cloudformation:*'
                  - 'ecs:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codestar-connections:UseConnection'
                Resource: !Ref ConnectionArn
                Condition:
                  ForAllValues:StringEquals:
                    codestar-connections:FullRepositoryId: !Join [ "/", [ !Ref GitHubOwner, !Ref GitHubRepository ]]
      Tags:
        - Key: Application ID
          Value: Zyme Caucus integration
        - Key: Environment
          Value: !FindInMap [EnvironmentNames, !Ref "Environment", Name]

  CloudFormationServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub zyme-caucus-${Environment}-cloudformation-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub zyme-caucus-${Environment}-cloudformation-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:AttachRolePolicy'
                  - 'iam:CreateRole'
                  - 'iam:DetachRolePolicy'
                  - 'iam:DeleteRole'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'iam:PassRole'
                  - 'iam:PutRolePolicy'
                  - 'iam:TagRole'
                  - 'iam:UntagRole'
                  - 'iam:UpdateAssumeRolePolicy'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                  - 'iam:PutRolePolicy'
                  - 'iam:UpdateRoleDescription'
                  - 'iam:GetServiceLinkedRoleDeletionStatus'
                  - 'iam:DeleteServiceLinkedRole'
                Resource: 'arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS*'
                Condition:
                  StringLike:
                    'iam:AWSServiceName': 'ecs.amazonaws.com'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DeleteLogGroup'
                  - 'logs:DeleteLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:AssociateRouteTable'
                  - 'ec2:AssociateSubnetCidrBlock'
                  - 'ec2:AssociateVpcCidrBlock'
                  - 'ec2:AttachInternetGateway'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:CreateInternetGateway'
                  - 'ec2:CreateRoute'
                  - 'ec2:CreateRouteTable'
                  - 'ec2:CreateSecurityGroup'
                  - 'ec2:CreateSubnet'
                  - 'ec2:CreateTags'
                  - 'ec2:CreateVpc'
                  - 'ec2:CreateVpcEndpoint'
                  - 'ec2:DeleteInternetGateway'
                  - 'ec2:DeleteRoute'
                  - 'ec2:DeleteRouteTable'
                  - 'ec2:DeleteSecurityGroup'
                  - 'ec2:DeleteSubnet'
                  - 'ec2:DeleteVpc'
                  - 'ec2:DeleteVpcEndpoints'
                  - 'ec2:DescribeAccountAttributes'
                  - 'ec2:DescribeAvailabilityZones'
                  - 'ec2:DescribeInternetGateways'
                  - 'ec2:DescribeRouteTables'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeVpcEndpoints'
                  - 'ec2:DescribeVpcEndpointServices'
                  - 'ec2:DetachInternetGateway'
                  - 'ec2:DisassociateRouteTable'
                  - 'ec2:DisassociateSubnetCidrBlock'
                  - 'ec2:DisassociateVpcCidrBlock'
                  - 'ec2:ModifySubnetAttribute'
                  - 'ec2:ModifyVpcAttribute'
                  - 'ec2:ModifyVpcEndpoint'
                  - 'ec2:RevokeSecurityGroupIngress'
                  - 'ec2:UpdateSecurityGroupRuleDescriptionsIngress'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:AddTags'
                  - 'elasticloadbalancing:CreateListener'
                  - 'elasticloadbalancing:CreateLoadBalancer'
                  - 'elasticloadbalancing:CreateTargetGroup'
                  - 'elasticloadbalancing:DeleteListener'
                  - 'elasticloadbalancing:DeleteLoadBalancer'
                  - 'elasticloadbalancing:DeleteTargetGroup'
                  - 'elasticloadbalancing:DescribeListeners'
                  - 'elasticloadbalancing:DescribeLoadBalancers'
                  - 'elasticloadbalancing:DescribeTargetGroups'
                  - 'elasticloadbalancing:ModifyListener'
                  - 'elasticloadbalancing:ModifyLoadBalancerAttributes'
                  - 'elasticloadbalancing:ModifyTargetGroup'
                  - 'elasticloadbalancing:ModifyTargetGroupAttributes'
                  - 'elasticloadbalancing:RemoveTags'
                  - 'elasticloadbalancing:SetSecurityGroups'
                  - 'elasticloadbalancing:SetSubnets'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:CreateService'
                  - 'ecs:DeleteCluster'
                  - 'ecs:DeleteService'
                  - 'ecs:DeregisterTaskDefinition'
                  - 'ecs:DescribeClusters'
                  - 'ecs:DescribeServices'
                  - 'ecs:RegisterTaskDefinition'
                  - 'ecs:TagResource'
                  - 'ecs:UntagResource'
                  - 'ecs:UpdateService'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudformation:*'
                  - 'cloudwatch:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - ${BucketArn}/*
                  - { BucketArn: !GetAtt CodePipelineArtifactStoreBucket.Arn }
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                Resource: !Sub arn:aws:apigateway:${AWS::Region}::*
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                Resource:
                  - !Sub
                    - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${NlbHost}
                    - NlbHost: !FindInMap [EnvironmentNames, !Ref "Environment", NlbHostSSMParameter]
                  - !Sub
                    - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${VpcLinkId}
                    - VpcLinkId: !FindInMap [EnvironmentNames, !Ref "Environment", VpcLinkIdSSMParameter]
      Tags:
        - Key: Application ID
          Value: Zyme Caucus integration
        - Key: Environment
          Value: !FindInMap [EnvironmentNames, !Ref "Environment", Name]
